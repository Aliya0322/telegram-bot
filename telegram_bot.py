import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from mistralai import Mistral
from datetime import datetime


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_KEY = os.getenv("API_KEY")
MODEL_NAME = "codestral-latest"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
MAX_REQUESTS_PER_DAY = 10


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Mistral AI
async def get_ai_response(content, prompt):
    try:
        client = Mistral(api_key=API_KEY)

        response = await client.chat.stream_async(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": content},
            ],
        )
        result = ""
        async for chunk in response:
            delta_content = chunk.data.choices[0].delta.content
            if delta_content:
                result += delta_content
        return result or "–û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ,session=session
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def check_request_limit(user_id):
    today = datetime.now().date()

    if user_id not in user_requests:
        user_requests[user_id] = {"count": 0, "date": today}

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_requests[user_id]["date"] != today:
        user_requests[user_id] = {"count": 0, "date": today}

    remaining_requests = MAX_REQUESTS_PER_DAY - user_requests[user_id]["count"]

    if remaining_requests <= 0:
        return "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞. üëãüèª", False
    return (
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë <b>{remaining_requests} –∑–∞–ø—Ä–æ—Å–æ–≤</b> —Å–µ–≥–æ–¥–Ω—è.\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëáüèª</b>",
        True,
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def update_request_count(user_id):
    if user_id in user_requests:
        user_requests[user_id]["count"] += 1


# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_reply_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç"),
                KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å e-mail üì©"),
            ],
            [
                KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —ç—Å—Å–µ üîç"),
                KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üåü"),
            ],
        ],
        resize_keyboard=True,
    )


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EmailStates(StatesGroup):
    waiting_for_email_topic = State()
    waiting_for_email_tone = State()
    waiting_for_additional_details= State()


class EssayStates(StatesGroup):
    waiting_for_essay_topic = State()


class SpellCheckStates(StatesGroup):
    waiting_for_text_to_check = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! üá¨üáß\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>Lingvo</b>, –∏ —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ò–ò.\n\n"
        "–Ø –Ω–∞–∫–æ–ø–∏–ª –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –∏–∑—É—á–∞—è –ª—É—á—à–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.\n\n‚û°Ô∏è –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –ø–æ–º–æ–≥–∞—é"
        " —à–∫–æ–ª—å–Ω–∏–∫–∞–º - <b>–ø–æ–≤—ã—Å–∏—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>, –∞ –≤–∑—Ä–æ—Å–ª—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º - <b>–¥–æ—Å—Ç–∏–≥–∞—Ç—å —É—Å–ø–µ—Ö–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>.\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ —É—á–µ–±–µ. üåü\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëáüèª</b>",
        reply_markup=create_reply_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç"
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç")
async def spell_checker(message: Message, state: FSMContext):
    await state.set_state(SpellCheckStates.waiting_for_text_to_check)
    await message.answer(
        "–†–∞–¥ –ø–æ–º–æ—á—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç <b>–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ</b>, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é.\n\n"
        " –Ø –∏—Å–ø—Ä–∞–≤–ª—é –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è üëáüèª",
        reply_markup=create_reply_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message(SpellCheckStates.waiting_for_text_to_check)
async def handle_spell_check(message: Message, state: FSMContext):
    prompt = (
        "–¢—ã —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
        "–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
        "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>, <b>–û—à–∏–±–∫–∏:</b>"
        "–û–±—ä—è—Å–Ω—è–π –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        "–¢—ã —É–º–µ–µ—à—å –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
        "–û–±—â–∞–π—Å—è –≤ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–º, –¥—Ä—É–∂–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ –Ω–∞ –í—ã, –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—è."
    )

    await state.clear()
    await handle_request(message, prompt)


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_request(message: Message, prompt):
    user_id = message.from_user.id
    limit_message, within_limit = check_request_limit(user_id)

    if not within_limit:
        await message.answer(limit_message)
        return

    if len(message.text) > 200:
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
    update_request_count(user_id)

    response = await get_ai_response(message.text, prompt)
    await message.answer(response, reply_markup=create_reply_menu())

    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    limit_message, _ = check_request_limit(user_id)
    await message.answer(limit_message, reply_markup=create_reply_menu())


# –ö–æ–º–∞–Ω–¥–∞ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å e-mail üì©"
@dp.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å e-mail üì©")
async def write_email(message: Message, state: FSMContext):
    await state.set_state(EmailStates.waiting_for_email_topic)
    await message.answer(
        "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤ –ø–∏—Å—å–º–µ, "
        "–∏ —è –Ω–∞–ø–∏—à—É –µ–≥–æ <b>–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ</b> –¥–ª—è –≤–∞—Å.\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –µ–≥–æ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∏—Å—å–º–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –∂–∞–ª–æ–±–∞, –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç. –¥.) üëáüèª",
        reply_markup=create_reply_menu()
    )

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å—Ç–∏–ª–µ –ø–∏—Å—å–º–∞ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
@dp.message(EmailStates.waiting_for_email_topic)
async def ask_email_tone(message: Message, state: FSMContext):
    await state.update_data(email_topic=message.text)
    await state.set_state(EmailStates.waiting_for_email_tone)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∏–ª—è –ø–∏—Å—å–º–∞
    tone_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", callback_data="tone_official")],
        [InlineKeyboardButton(text="üòä –î—Ä—É–∂–µ—Å–∫–∏–π", callback_data="tone_friendly")],
    ])

    await message.answer(
        "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –≤–∞–º –Ω—É–∂–µ–Ω?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç üëáüèª",
        reply_markup=tone_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("tone_"))
async def handle_email_tone(callback: CallbackQuery, state: FSMContext):
    tone_mapping = {
        "tone_official": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
        "tone_friendly": "–î—Ä—É–∂–µ—Å–∫–∏–π"
    }

    chosen_tone = tone_mapping.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")
    await state.update_data(email_tone=chosen_tone)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞: *{chosen_tone}*\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤ –ø–∏—Å—å–º–æ? –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤?"
        "\n\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.",
        parse_mode="Markdown"
    )

    await state.set_state(EmailStates.waiting_for_additional_details)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏

# –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email
@dp.message(EmailStates.waiting_for_additional_details)
async def generate_email(message: Message, state: FSMContext):
    user_data = await state.get_data()
    email_topic = user_data.get("email_topic", "")
    email_tone = user_data.get("email_tone", "")
    additional_details = message.text if message.text.lower() != "–Ω–µ—Ç" else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞
    prompt = (
        "–¢—ã —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è e-mail. "
        f"–ù–∞–ø–∏—à–∏ {email_tone.lower()} –ø–∏—Å—å–º–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ —Ç–µ–º—É '{email_topic}'. "
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–æ –∑–≤—É—á–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."
    )

    if additional_details:
        prompt += f" –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {additional_details}."


    await handle_request(message, prompt)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —ç—Å—Å–µ üîç"
@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —ç—Å—Å–µ üîç")
async def essay_plan(message: Message, state: FSMContext):
    await state.set_state(EssayStates.waiting_for_essay_topic)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n\n–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω —ç—Å—Å–µ.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ —ç—Å—Å–µ üëáüèª", reply_markup=create_reply_menu())

@dp.message(EssayStates.waiting_for_essay_topic)
async def handle_essay_plan(message: Message, state: FSMContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —ç—Å—Å–µ
    prompt = (
        "You are an expert in writing essays in English. Create a detailed essay plan in English based on the user's topic. "
        "The plan must include three sections: <b>Introduction</b>, <b>Main Body</b>, and <b>Conclusion</b>. "
        "Each section should contain 2-3 key points or ideas. "
        "Write the plan in English and use clear, structured language. "
        "Here is the user's topic: {user_topic}"
    ).format(user_topic=message.text)

    await state.clear()
    await handle_request(message, prompt)


@dp.message(F.text == "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üåü")
async def invite_friends(message: Message):
    await message.answer(
        "–û—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç–µ–±–µ –∑–¥–µ—Å—å –Ω—Ä–∞–≤–∏—Ç—Å—è!\n\n"
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://t.me/myligvoacademy_bot üåü",
        reply_markup=create_reply_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –º–µ–Ω—é
@dp.message()
async def handle_unknown_message(message: Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëáüèª", reply_markup=create_reply_menu())

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())